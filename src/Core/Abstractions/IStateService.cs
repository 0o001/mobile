using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Bit.Core.Enums;
using Bit.Core.Models.Data;
using Bit.Core.Models.Domain;
using Bit.Core.Models.View;
using Bit.Core.Utilities;

namespace Bit.Core.Abstractions
{
    public interface IStateService
    {
        bool BiometricLocked { get; set; }
        ExtendedObservableCollection<AccountView> Accounts { get; set; }
        Task<string> GetActiveUserIdAsync(StorageOptions options = null);
        Task SetActiveUserAsync(string userId);
        Task<bool> IsAuthenticatedAsync(StorageOptions options = null);
        Task<bool> HasMultipleAccountsAsync();
        Task AddAccountAsync(Account account);
        // Task SetInformationAsync(string userId, string email, KdfType kdf, int? kdfIterations);
        Task CleanAsync(string userId);
        Task<EnvironmentUrlData> GetPreAuthEnvironmentUrlsAsync();
        Task SetPreAuthEnvironmentUrlsAsync(EnvironmentUrlData value);
        Task<EnvironmentUrlData> GetEnvironmentUrlsAsync(StorageOptions options = null);
        Task SetEnvironmentUrlsAsync(EnvironmentUrlData value, StorageOptions options = null);
        Task<bool?> GetBiometricUnlockAsync(StorageOptions options = null);
        Task SetBiometricUnlockAsync(bool? value, StorageOptions options = null);
        Task<bool> CanAccessPremiumAsync(StorageOptions options = null);
        Task<string> GetProtectedPinAsync(StorageOptions options = null);
        Task SetProtectedPinAsync(string value, StorageOptions options = null);
        Task<string> GetPinProtectedAsync(StorageOptions options = null);
        Task SetPinProtectedAsync(string value, StorageOptions options = null);
        Task<EncString> GetPinProtectedCachedAsync(StorageOptions options = null);
        Task SetPinProtectedCachedAsync(EncString value, StorageOptions options = null);
        Task<KdfType?> GetKdfTypeAsync(StorageOptions options = null);
        Task SetKdfTypeAsync(KdfType? value, StorageOptions options = null);
        Task<int?> GetKdfIterationsAsync(StorageOptions options = null);
        Task SetKdfIterationsAsync(int? value, StorageOptions options = null);
        Task<string> GetKeyEncryptedAsync(StorageOptions options = null);
        Task SetKeyEncryptedAsync(string value, StorageOptions options = null);
        Task<SymmetricCryptoKey> GetKeyDecryptedAsync(StorageOptions options = null);
        Task SetKeyDecryptedAsync(SymmetricCryptoKey value, StorageOptions options = null);
        Task<string> GetKeyHashAsync(StorageOptions options = null);
        Task SetKeyHashAsync(string value, StorageOptions options = null);
        Task<string> GetKeyHashCachedAsync(StorageOptions options = null);
        Task SetKeyHashCachedAsync(string value, StorageOptions options = null);
        Task<string> GetEncKeyEncryptedAsync(StorageOptions options = null);
        Task SetEncKeyEncryptedAsync(string value, StorageOptions options = null);
        Task<SymmetricCryptoKey> GetEncKeyDecryptedAsync(StorageOptions options = null);
        Task SetEncKeyDecryptedAsync(SymmetricCryptoKey value, StorageOptions options = null);
        Task<Dictionary<string, string>> GetOrgKeysEncryptedAsync(StorageOptions options = null);
        Task SetOrgKeysEncryptedAsync(Dictionary<string, string> value, StorageOptions options = null);
        Task<Dictionary<string, SymmetricCryptoKey>> GetOrgKeysDecryptedAsync(StorageOptions options = null);
        Task SetOrgKeysDecryptedAsync(Dictionary<string, SymmetricCryptoKey> value, StorageOptions options = null);
        Task<byte[]> GetPublicKeyAsync(StorageOptions options = null);
        Task SetPublicKeyAsync(byte[] value, StorageOptions options = null);
        Task<string> GetPrivateKeyEncryptedAsync(StorageOptions options = null);
        Task SetPrivateKeyEncryptedAsync(string value, StorageOptions options = null);
        Task<byte[]> GetPrivateKeyDecryptedAsync(StorageOptions options = null);
        Task SetPrivateKeyDecryptedAsync(byte[] value, StorageOptions options = null);
        Task<List<string>> GetAutofillBlacklistedUrisAsync(StorageOptions options = null);
        Task SetAutofillBlacklistedUrisAsync(List<string> value, StorageOptions options = null);
        Task<bool?> GetAutofillTileAddedAsync(StorageOptions options = null);
        Task SetAutofillTileAddedAsync(bool? value, StorageOptions options = null);
        Task<string> GetEmailAsync(StorageOptions options = null);
        // Task SetEmailAsync(string value, StorageOptions options = null);
        Task<long?> GetLastActiveTimeAsync(StorageOptions options = null);
        Task SetLastActiveTimeAsync(long? value, StorageOptions options = null);
        Task<int?> GetVaultTimeoutAsync(StorageOptions options = null);
        Task SetVaultTimeoutAsync(int? value, StorageOptions options = null);
        Task<string> GetVaultTimeoutActionAsync(StorageOptions options = null);
        Task SetVaultTimeoutActionAsync(string value, StorageOptions options = null);
        Task<DateTime?> GetLastFileCacheClearAsync(StorageOptions options = null);
        Task SetLastFileCacheClearAsync(DateTime? value, StorageOptions options = null);
        Task<PreviousPageInfo> GetPreviousPageInfoAsync(StorageOptions options = null);
        Task SetPreviousPageInfoAsync(PreviousPageInfo value, StorageOptions options = null);
        Task<int> GetInvalidUnlockAttemptsAsync(StorageOptions options = null);
        Task SetInvalidUnlockAttemptsAsync(int? value, StorageOptions options = null);
        Task<string> GetLastBuildAsync(StorageOptions options = null);
        Task SetLastBuildAsync(string value, StorageOptions options = null);
        Task<bool?> GetDisableFaviconAsync(StorageOptions options = null);
        Task SetDisableFaviconAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetDisableAutoTotpCopyAsync(StorageOptions options = null);
        Task SetDisableAutoTotpCopyAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetInlineAutofillEnabledAsync(StorageOptions options = null);
        Task SetInlineAutofillEnabledAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetAutofillDisableSavePromptAsync(StorageOptions options = null);
        Task SetAutofillDisableSavePromptAsync(bool? value, StorageOptions options = null);
        Task<Dictionary<string, Dictionary<string, object>>> GetLocalDataAsync(StorageOptions options = null);
        Task SetLocalDataAsync(Dictionary<string, Dictionary<string, object>> value, StorageOptions options = null);
        Task<Dictionary<string, CipherData>> GetEncryptedCiphersAsync(StorageOptions options = null);
        Task SetEncryptedCiphersAsync(Dictionary<string, CipherData> value, StorageOptions options = null);
        Task<int?> GetDefaultUriMatchAsync(StorageOptions options = null);
        Task SetDefaultUriMatchAsync(int? value, StorageOptions options = null);
        Task<HashSet<string>> GetNeverDomainsAsync(StorageOptions options = null);
        Task SetNeverDomainsAsync(HashSet<string> value, StorageOptions options = null);
        Task<int?> GetClearClipboardAsync(StorageOptions options = null);
        Task SetClearClipboardAsync(int? value, StorageOptions options = null);
        Task<Dictionary<string, CollectionData>> GetEncryptedCollectionsAsync(StorageOptions options = null);
        Task SetEncryptedCollectionsAsync(Dictionary<string, CollectionData> value, StorageOptions options = null);
        Task<bool> GetPasswordRepromptAutofillAsync(StorageOptions options = null);
        Task SetPasswordRepromptAutofillAsync(bool? value, StorageOptions options = null);
        Task<bool> GetPasswordVerifiedAutofillAsync(StorageOptions options = null);
        Task SetPasswordVerifiedAutofillAsync(bool? value, StorageOptions options = null);
        Task<DateTime?> GetLastSyncAsync(StorageOptions options = null);
        Task SetLastSyncAsync(DateTime? value, StorageOptions options = null);
        Task<string> GetSecurityStampAsync(StorageOptions options = null);
        Task SetSecurityStampAsync(string value, StorageOptions options = null);
        Task<bool> GetEmailVerifiedAsync(StorageOptions options = null);
        Task SetEmailVerifiedAsync(bool? value, StorageOptions options = null);
        Task<bool> GetForcePasswordReset(StorageOptions options = null);
        Task SetForcePasswordResetAsync(bool? value, StorageOptions options = null);
        Task<bool> GetSyncOnRefreshAsync(StorageOptions options = null);
        Task SetSyncOnRefreshAsync(bool? value, StorageOptions options = null);
        Task<string> GetRememberedEmailAsync(StorageOptions options = null);
        Task SetRememberedEmailAsync(string value, StorageOptions options = null);
        Task<bool?> GetRememberEmailAsync(StorageOptions options = null);
        Task SetRememberEmailAsync(bool? value, StorageOptions options = null);
        Task<string> GetRememberedOrgIdentifierAsync(StorageOptions options = null);
        Task SetRememberedOrgIdentifierAsync(string value, StorageOptions options = null);
        Task<bool?> GetRememberOrgIdentifierAsync(StorageOptions options = null);
        Task SetRememberOrgIdentifierAsync(bool? value, StorageOptions options = null);
        Task<string> GetThemeAsync(StorageOptions options = null);
        Task SetThemeAsync(string value, StorageOptions options = null);
        Task<bool?> GetAddSitePromptShownAsync(StorageOptions options = null);
        Task SetAddSitePromptShownAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetMigratedFromV1Async(StorageOptions options = null);
        Task SetMigratedFromV1Async(bool? value, StorageOptions options = null);
        Task<bool?> GetMigratedFromV1AutofillPromptShownAsync(StorageOptions options = null);
        Task SetMigratedFromV1AutofillPromptShownAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetTriedV1ResyncAsync(StorageOptions options = null);
        Task SetTriedV1ResyncAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetPushInitialPromptShownAsync(StorageOptions options = null);
        Task SetPushInitialPromptShownAsync(bool? value, StorageOptions options = null);
        Task<DateTime?> GetPushLastRegistrationDateAsync(StorageOptions options = null);
        Task SetPushLastRegistrationDateAsync(DateTime? value, StorageOptions options = null);
        Task<string> GetPushCurrentTokenAsync(StorageOptions options = null);
        Task SetPushCurrentTokenAsync(string value, StorageOptions options = null);
        Task<List<EventData>> GetEventCollectionAsync(StorageOptions options = null);
        Task SetEventCollectionAsync(List<EventData> value, StorageOptions options = null);
        Task<Dictionary<string, FolderData>> GetEncryptedFoldersAsync(StorageOptions options = null);
        Task SetEncryptedFoldersAsync(Dictionary<string, FolderData> value, StorageOptions options = null);
        Task<Dictionary<string, PolicyData>> GetEncryptedPoliciesAsync(StorageOptions options = null);
        Task SetEncryptedPoliciesAsync(Dictionary<string, PolicyData> value, StorageOptions options = null);
        Task<string> GetPushRegisteredTokenAsync(StorageOptions options = null);
        Task SetPushRegisteredTokenAsync(string value, StorageOptions options = null);
        Task<bool?> GetAppExtensionStartedAsync(StorageOptions options = null);
        Task SetAppExtensionStartedAsync(bool? value, StorageOptions options = null);
        Task<bool?> GetAppExtensionActivatedAsync(StorageOptions options = null);
        Task SetAppExtensionActivatedAsync(bool? value, StorageOptions options = null);
        Task<string> GetAppIdAsync(StorageOptions options = null);
        Task SetAppIdAsync(string value, StorageOptions options = null);
        Task<bool> GetUsesKeyConnectorAsync(StorageOptions options = null);
        Task SetUsesKeyConnectorAsync(bool? value, StorageOptions options = null);
        Task<Dictionary<string, OrganizationData>> GetOrganizationsAsync(StorageOptions options = null);
        Task SetOrganizationsAsync(Dictionary<string, OrganizationData> organizations, StorageOptions options = null);
        Task<PasswordGenerationOptions> GetPasswordGenerationOptionsAsync(StorageOptions options = null);
        Task SetPasswordGenerationOptionsAsync(PasswordGenerationOptions value, StorageOptions options = null);
        Task<List<GeneratedPasswordHistory>> GetEncryptedPasswordGenerationHistory(StorageOptions options = null);
        Task SetEncryptedPasswordGenerationHistoryAsync(List<GeneratedPasswordHistory> value, StorageOptions options = null);
        Task<Dictionary<string, SendData>> GetEncryptedSendsAsync(StorageOptions options = null);
        Task SetEncryptedSendsAsync(Dictionary<string, SendData> value, StorageOptions options = null);
        Task<Dictionary<string, object>> GetSettingsAsync(StorageOptions options = null);
        Task SetSettingsAsync(Dictionary<string, object> value, StorageOptions options = null);
        Task<string> GetAccessTokenAsync(StorageOptions options = null);
        Task SetAccessTokenAsync(string value, StorageOptions options = null);
        Task<string> GetRefreshTokenAsync(StorageOptions options = null);
        Task SetRefreshTokenAsync(string value, StorageOptions options = null);
        Task<string> GetTwoFactorTokenAsync(StorageOptions options = null);
        Task SetTwoFactorTokenAsync(string value, StorageOptions options = null);
    }
}
